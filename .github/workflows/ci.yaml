name: CI
on:
  pull_request:
  push:
    branches:
    - master
    - dev

  workflow_run:
    workflows:
      - sync-channels
    types:
      - completed
    branches:
      - master

jobs:
  flake-check:
    name: Flake check
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3.0.2

    - name: Install Nix (flakes, nixpkgs-unstable)
      uses: cachix/install-nix-action@v17

    # Flake check consumes tons of memory.
    - name: Enlarge swap
      run: |
        free -h
        swapon --show
        SWAP_PATH=$(swapon --show=NAME --noheading | head -n1)
        sudo swapoff -a
        sudo fallocate -l 8G "$SWAP_PATH"
        sudo mkswap "$SWAP_PATH"
        sudo swapon "$SWAP_PATH"
        free -h
        swapon --show

    - name: Check flake
      run: nix flake check -v --show-trace --no-update-lock-file

  check-sync-script:
    name: Check sync script is deterministic
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3.0.2

    - name: Install Nix
      uses: cachix/install-nix-action@v17
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable

    - name: Clean the latest version of each channel
      run: |
        for channel in stable beta nightly; do
          version=$(sed -nE 's/.*latest = "(.*?)".*/\1/p' "./manifests/$channel/default.nix")
          echo "Remove $channel $version"
          rm "./manifests/$channel/default.nix"
          if [[ "$channel" == "stable" ]]; then
            rm "./manifests/$channel/$version.nix"
          else
            rm "./manifests/$channel/${version%%-*}/$version.nix"
          fi
        done

    - name: Re-fetch latest stable
      run: ./scripts/fetch.py stable

    - name: Re-fetch latest beta
      run: ./scripts/fetch.py beta

    - name: Re-fetch latest nightly
      run: ./scripts/fetch.py nightly

    - name: Verify file changes
      run: |
        short_status=$(git status --short)
        echo "$short_status"
        shopt -s extglob
        while read -r change; do
          case "$change" in
            # Okay if there is no change.
            "" ) ;;
            "?? "manifests/@(stable|nightly|beta)/* ) ;;
            "M "manifests/@(renames.nix|targets.nix) ) ;;
            "M "manifests/@(stable|nightly|beta)/default.nix ) ;;
            * )
              echo "Unexpected change: $change"
              exit 1
          esac
        done <<<"$short_status"

  test-rust:
    name: Test Rust
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust-channel: [stable, beta, nightly]
        profile: [minimal, default]
        nixpkgs-channel: [nixpkgs-unstable, nixos-21.11]
        exclude:
          - os: macos-latest
            nixpkgs-channel: nixos-21.11
        include:
          # The legacy package, used by compatible functions.
          - os: ubuntu-latest
            rust-channel: stable
            profile: rust
            nixpkgs-channel: nixpkgs-unstable
          # Old Nix
          - os: ubuntu-latest
            rust-channel: stable
            profile: default
            nixpkgs-channel: nixos-21.11
            nix_install_url: https://releases.nixos.org/nix/nix-2.4/install

    runs-on: ${{ matrix.os }}
    env:
      NIX_SHELL_CMD: nix-shell --pure --argstr channel ${{ matrix.rust-channel }} --argstr profile ${{ matrix.profile }}

    steps:
    - name: Checkout
      uses: actions/checkout@v3.0.2

    - name: Install Nix
      uses: cachix/install-nix-action@v17
      with:
        nix_path: nixpkgs=channel:${{ matrix.nixpkgs-channel }}
        install_url: ${{ matrix.nix_install_url }}

    # Workaround for https://github.com/oxalica/rust-overlay/issues/54
    - name: Don't let ~/.cargo/bin mess things up
      run: rm -rf ~/.cargo/bin

    - name: Prepare nix-shell
      run: |
        cd examples/hello-world
        $NIX_SHELL_CMD --command true

    - name: Test cargo build
      run: |
        cd examples/hello-world
        set -o pipefail
        $NIX_SHELL_CMD --command "make run" | tee out
        [[ "$(< out)" == *"Hello, world!"* ]]

    - name: Test cargo fmt
      if: matrix.profile == 'default' || matrix.profile == 'rust'
      run: |
        cd examples/hello-world
        $NIX_SHELL_CMD --command "cargo fmt -- --check"

    - name: Test cargo clippy
      if: matrix.profile == 'default' || matrix.profile == 'rust'
      run: |
        cd examples/hello-world
        set -o pipefail
        $NIX_SHELL_CMD --command "cargo clippy -- --cap-lints=warn" 2>&1 | tee out
        [[ "$(< out)" == *"warning: this loop never actually loops"* ]]

  test-cross-examples:
    name: Test cross compilation examples
    if: ${{ github.event.workflow_run.conclusion != 'failure' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        example: [cross-aarch64, cross-wasi, cross-mingw]

    steps:
    - name: Checkout
      uses: actions/checkout@v3.0.2

    - name: Install Nix
      uses: cachix/install-nix-action@v17
      with:
        nix_path: nixpkgs=channel:nixpkgs-unstable

    # Workaround for https://github.com/oxalica/rust-overlay/issues/54
    - name: Don't let ~/.cargo/bin mess things up
      run: rm -rf ~/.cargo/bin

    - name: Prepare nix-shell
      run: |
        cd examples/${{ matrix.example }}
        nix-shell --pure --command true

    - name: Build and run example
      run: |
        cd examples/${{ matrix.example }}
        set -o pipefail
        # No --pure since it requires CA cert access for crates downloading.
        nix-shell --command "make run" | tee out
        [[ "$(< out)" == *"Hello, world!"* ]]
